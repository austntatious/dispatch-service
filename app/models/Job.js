'use strict'; 

var Sequelize = require('sequelize');

// DEFAULT SCOPE SHOULD BE ORGANIZATION OR DRIVER FOR ALL QUERIES
// Jobs belong to Drivers & Organizations
// Has Final Recipient info - phone, name, etc
// Has pickup & dropoff stops
// has startBy and FinishBefore fields signifying when order needs to be completed
// belongs to one Driver and one Organization
// Has updatedBy log to show if driver or admin is doing updates on job
// Has createdBy log to show if generated by API call or dashboard app - store admin info or client call info
// statuses : pending, dispatched, driverConfirmed (if deny, go back to pending), 
// statuses based on STOP status: pickedup, delayed, cancelled, completed   
// add a delayed method - cancel order assignment and append to unassigned order queue
// cancelling a job will also cancel its stops
// dispatchedBy to show if manually dispatched by admin or route optimizer
// autoAssign - on or off, if on, send to optimizer; if off, have web dispatch assign pickup & dropoff stop

module.exports = function (sequelize) {
   var Job = sequelize.define('Job', {
    recipient: {
      type: Sequelize.STRING // Foreign Key id to customer table
    },
    createdBy: {
      type: Sequelize.STRING // created by API call or web dashboard
    },
    status: {
      type: Sequelize.INTEGER // Show status: pending, dispatched, confirmed, pickedup, delayed, cancel, complete
    },
    startBy: {
      type: Sequelize.DATE // time that order will be ready to be picked up
    },
    completeBefore: {
      type: Sequelize.DATE // time that order should be completed
    },
    stops: {
      type: Sequelize.UUID
    },
    notes: {
      type: Sequelize.TEXT
    },
  }, {
      // OPTIONS
      // add autoIncrement IDs
      // classMethods:
    underscored: true
  });
   return Job;
};

  timeCreated: Date,
  timeLastModified: { type: Date, default: Date.now }, 
  organization: String,  //organization ID
  driver: String, //driver ID
  createdBy: String, //origin of order, either admin created or from api
  pickupPoint: {
    address: {
      street: String,
      city: String,
      state: String,
      postalCode: String
    },
    phone: String,
    name: String,
    location: Array //long lat geocoordinates 
  },
  dropoffPoint: {
    address: {
      street: String,
      city: String,
      state: String,
      postalCode: String
    },
    phone: String,
    name: String,
    location: Array //long lat coordinates
  },
  state: [
  //array of objects with states  
  ],
  //current state
     //assigned, confirmed, active (picked up), delay, completed (dropped off)
  completeBefore: Date, //optional -- shouldn't take longer than 1 hour from order time
  startBy: Date, //optional --food takes 15 minutes prep time
  notes: String, //optional
  autoAssign: Boolean
});
