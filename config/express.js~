'use strict';

/**
 * Load Module dependencies.
 */

var cookieParser = require('cookie-parser');
var compress = require('compression');
var favicon = require('serve-favicon');
var session = require('express-session');
var bodyParser = require('body-parser');
var logger = require('morgan');
var errorHandler = require('errorhandler');
var lusca = require('lusca');
var methodOverride = require('method-override');

var _ = require('lodash');
var MongoStore = require('connect-mongo')(session);
var flash = require('express-flash');
var path = require('path');
var mongoose = require('mongoose');
var passport = require('passport');
var expressValidator = require('express-validator');
var sass = require('node-sass-middleware');

var logger = require('./logger');
/**
 * Configuration for all routes
*/

exports.all = function(app) {
app.set('port', process.env.PORT || 3000);
app.use(compress());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
// error handling
if env === 'dev') {
app.use(errorHandler());
}

// Ovverride Express logger with morgan logger
  app.use(morgan('short',{ 'stream': logger.stream }));
}


/**
 * Configuration for web app
*/

exports.web = function(app) {

// Middleware for static assets in public directory
app.use(favicon(path.join(__dirname, 'public', 'favicon.png')));
app.use(express.static(path.join(__dirname, 'public'), { maxAge: 31557600000 }));
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(sass({
  src: path.join(__dirname, 'public'),
  dest: path.join(__dirname, 'public'),
  debug: true,
  outputStyle: 'expanded'
}));

// Session management and security 
app.use(session({
  resave: true,
  saveUninitialized: true,
  secret: secrets.sessionSecret,
  store: new MongoStore({ url: secrets.db, autoReconnect: true })
}));
app.use(expressValidator());
app.use(methodOverride());
app.use(cookieParser());
app.use(passport.initialize());
app.use(passport.session());
app.use(flash());
app.use(lusca({
  csrf: true,
  xframe: 'SAMEORIGIN',
  xssProtection: true
}));
app.use(function(req, res, next) {
  res.locals.user = req.user;
  next();
});
app.use(function(req, res, next) {
  if (/plugins/i.test(req.path)) { 
    req.session.returnTo = req.path;
  }
  //regex pattern for testing case-insensitive, and redirect to original url after authentication
  next();
});
}
